// Top-level build file where you can add configuration options common to all sub-projects/modules.
buildscript {

    repositories {
        mavenCentral()
        google()
        gradlePluginPortal()
    }

    dependencies {
        // System properties for plugin versions are set in buildSrc
        // in order to pass the "dependencies" plugins' values as
        // we cannot access them here until after the buildscript
        classpath(System.getProperty("GRADLE_ANDROID"))
        classpath(System.getProperty("GRADLE_ANDROIDX_NAVIGATION_SAFEARGS"))
        classpath(System.getProperty("GRADLE_GOOGLE_HILT"))
        classpath(System.getProperty("GRADLE_VERSIONS"))
        classpath(System.getProperty("GRADLE_INTELLIJ"))
        classpath(System.getProperty("GRADLE_KOTLIN_DOKKA"))
        classpath(System.getProperty("GRADLE_KOTLIN"))
        classpath(System.getProperty("GRADLE_SERIALIZATION"))
        classpath(System.getProperty("GRADLE_MAVEN_PUBLISH"))
        classpath(System.getProperty("GRADLE_SQUARE_EXHAUSTIVE"))
        classpath(System.getProperty("GRADLE_SQUARE_SQLDELIGHT"))

        // NOTE: Do not place your application dependencies here; they belong
        // in the individual module build.gradle files
    }
}

plugins {
    id("com.github.ben-manes.versions")
}

allprojects {
    repositories {
        mavenCentral()
        google()
        gradlePluginPortal()
        maven { url "https://jitpack.io" } // Needed for Requery
    }
}

task clean(type: Delete) {
    delete rootProject.buildDir
}

////////////////////////////////////////////////////////////////////////////
/// Gradle Versions: https://github.com/ben-manes/gradle-versions-plugin ///
////////////////////////////////////////////////////////////////////////////

def isNonStable = { String version ->
    def stableKeyword = ['RELEASE', 'FINAL', 'GA'].any { it -> version.toUpperCase().contains(it) }
    def regex = /^[0-9,.v-]+(-r)?$/
    return !stableKeyword && !(version ==~ regex)
}

tasks.named("dependencyUpdates").configure {
    checkForGradleUpdate = true

    // Example 1: reject all non stable versions
    rejectVersionIf {
        isNonStable(candidate.version)
    }

    // Example 2: disallow release candidates as upgradable versions from stable versions
    rejectVersionIf {
        isNonStable(candidate.version) && !isNonStable(currentVersion)
    }

    // Example 3: using the full syntax
    resolutionStrategy {
        componentSelection {
            all {
                if (isNonStable(candidate.version) && !isNonStable(currentVersion)) {
                    reject("Release candidate")
                }
            }
        }
    }
}
